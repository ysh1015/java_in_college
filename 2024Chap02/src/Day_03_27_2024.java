
public class Day_03_27_2024 {
	public static void main(String[] args) {
//---------------------------              연산자                 -------------------------------------

		/* 연산이란?
		 		- 데이터를 처리하여 결과를 산출하는 것
		 	연산자
		 		- 연산에 사용되는 표시나 기호(+,=,*,/,%,=,
		 	피연산자
		 		- 연산 대상이 되는 데이터(리터럴, 변수)
		 	연산식
		 		- 연산자와 피연산자를 이용하여 연산의 과정을 기술한 것
		 		- 유일한 결과값을 산출하는 것을 '식'이라고 한다.
		 		- 결과값을 산출해낼 수 없으면 '식'이 아님
		 		
		 	유일한 값을 만들어야되기 때문에 규칙이 필요하다.
		 	
		 	**************** 규칙 : 산술(사칙연산)  > 비교(크다,작다 등등) > 논리(참, 거짓) ********************
		 	-5 => 피연산자가 하나 (단항)
		 	x + y =>  피연산자가 둘 (이항)
		 	x ? y : z => 피연산잔가 셋(삼항)
		 	단항 > 이항, 삼항
		 	
		 	
		 	대입연산자가 우선순위가 제일 낮다
		 	모든게 끝나고 가장 나중에 대입
		 	x = x + 1    =>    x += 1
		 	x = x = 1    =>    x -= 1
		 	
		 	x > 0 && y < 0  => 잘 갖춰진 식
		 	
		 	p 105에 나와았음
		 	
		 	순서
		 	! (not) > && (and) > || (or)
		 	
		 	
		 	p 79
		 	i++, ++i
		 	i--, --i
		 	
		 	------ 우선순위를 바꾸는 방법은 괄호를 쳐주면 된다. ------
		 */
		
		int x =1, y = 1;
		int r1 = ++x + 10; // 코드 실행 전에 1 증가
		int r2 = y++ + 10; // 코드 실행 후에 1 증가
		
		System.out.println(r1);
		System.out.println(r2);
		System.out.println(x);
		System.out.println(y);
		
		// 단순하게 x +1 을 쉽게 표현하기 위해 x++로 많이 표현함
		
		//------------------ 나누기 연산자 --------------------------
		System.out.println(8/3); // 몫 구하기
		System.out.println(8%4); // 나머지 구하기 (수의 배수를 찾기 위해서 많이 씀)
		
		// p82쪽에 나와있음
		
		//------------------------------------------------------------------------------------------------------
		
		/*	오버플로우
		 * 	- 타입이 허용되는 최대값을 벗어나는 것
		 * 
		 * 언더플로우
		 * - 타입이 허용하는 최소값을 벗어나는 것
		 * 
		 * */
		
		//--------------------------------------------------------------------------------------------------------
		
		/*		비교연산자
		 * 		비교연산자는 (==, !=, >, <. <=, >=) 동등 또는 크기를 평가해서 boolean타입인 true/false를 산출
		 * 		
		 * 		문자열을 비교할 때는 equals()와 !equals()를 쓴다.
		 * */
		
		System.out.println(3 == 3.);
		System.out.println(3.f == 3);
		System.out.println(0.1f == 0.1); // 실수는 비교가 어렵기 때문에 가능하면 실수비교는 하지 말아라
		
		//XOR(^)
		// 베타적 논리합
		// 둘이 같으면 거짓, 둘이 다르면 참
		int xor1 = 5; // 이진수로는 0101
		int xor2 = 3; // 이진수로는 0011

		int xorResult = xor1 ^ xor2; // XOR 연산

		System.out.println(xorResult); // 출력 결과: 6 (이진수로는 0110)
		
	}
}
