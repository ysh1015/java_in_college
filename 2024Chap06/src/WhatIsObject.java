
public class WhatIsObject {
	// ---------------------------------  객체 지향 프로그래밍 ---------------------------------------------------
	
	/* 객체(Object)란? 
	 * 	- 물리적으로 존재하거나 개념적인 것 중에서 다른 것과 식별 가능한 것을 말한다.
	 * - 객체라는 말이 나오기 전까지는 Entity(엔터티) 라고 불렸음
	 * - 모든 객체는 속성과 행위(동작)으로 구성된다.
	 * 
	 * - 이 세상 모든것들 하나하나가 객체다.
	 * - 여러개의 객체들중 하나의 객체라고 말할수 있는 것이 클래스다.
	 * - Class == only one, 객체는 많을 수도 하나일 수도 없을 수도 있다.
	 * - 객체는 클래스가 있어야 존재할 수 있다.
	 * - 클래스라고 하는건 뭔가를 정의 하는 것이다.
	 * 
	 * attribute - 속성(상태) : 필드
	 * behavior - 행위(기능) : 메소드                         객체지향(object - oriented)
	 * - ooa(분석), ood(설계), oop(프로그램)
	 * 
	 * 클래스와 인스턴스
	 * - 클래스로부터 생성된 객체를 해당 클래스의 인스턴스라고 부름
	 * - 자동차 '클래스의' '인스턴스'
	 * - 클래스로부터 객체를 만드는 과정을 인스턴스화라고 한다.
	 * 
	 * 
	 * 객체지향언어의 특징
	 * - 1. 정보 은닉 (information hiding)
	 * 	  2. 캡슐화 (encapsulation)
	 *   3. 상속 (inheritance)
	 *   4. 다형성 (polymorphism)
	 * 
	 * 위에의 모든 것을 하기 위해 제일 중요한 것은 ' 추상화(abstraction) ' 이다.
	 * - 중요한 특징을 찾아낸 후 간단하게 표현하는 것(간소화)
	 * - 특징을 찾아서 간소화한다. 단 어떤 관점에서 간소화 했는지가 중요함. 특징이 달라질 수도 있다.
	 * - 리모콘일 수 밖에 없는 특징, 컵일 수 밖에 없는 특징을 찾아야한다 (그것의 기능을 찾으면 된다)
	 * 
	 * ---------------------------------------- 정보은닉 -------------------------------------------------
	 * 정보를 감추는 것(안보이게 하는 것)
	 * 객체 외부에 있는 것들이 속성 과 행위에 접근(읽고, 쓰기) 못하게한다.
	 * !!!!!자신의 객체에 있는 행위들로 속성에 접근(읽고, 쓰기) 하는것이다.~~~~
	 * 객체 자신만이 자신의 상태를 변경할 수 있는 것(속성을 private으로 설정 해줘야됨)
	 * 
	 * - 접근 제한자
	 * public - 제한 범위 : x
	 * protected - 제한 범위 : 같은 패키지이거나, 자식 객체만 사용 가능
	 * (default) - 제한 범위 : 같은 패키지
	 * private - 제한 범위 : 객체 내부
	 * 
	 * ---------------------------------------- 캡슐화 ---------------------------------------------------
	 * (속성(데이터))필드와(과) (행위(동작))메소드를 묶어서 객체를 만드는것 
	 * 
	 * 
	 * 클래스의 구성 멤버
	 * - 필드 : 객체의 데이터가 저장되는 곳
	 * - 생성자 : 객체 생성시 제일 처음으로 호출 되는 메소드 형태. new 연산자로 객체를 생성할 때 객체의 속성의 초기화를
	 * 담당한다. 리턴 타입이 없고 이름은 클래스 이름과 동일하다.   new ~~~();
	 * - 메소드 : 객체의 행위
	 * 
	 * 클래스를 구성하는 필드와 메소드를 멤버라고 부른다.
	 * 
	 * 
	 * --------------------------------------- 오버로딩 -----------------------------------------------------
	 * - 중복해서 정의한 생성자
	 * - 매개변수를 달리하는 생성자를 여러 개 선언하는 것을 말한다.
	 * - 매개변수의 타입, 개수, 선언된 순서가 똑같을 경우 매개변수 이름만 바꾸는 것은 생성자 오버로딩 X
	 * - 반환형은 아무 상관이 없다
	 * 
	 * -------메서드 오버로딩-------
	 * - 메서드 이름은 같지만 매개변수의 타입, 개수, 순서가 다른 메서드를 여러개 선언하는 것을 말함
	 * 
	 * 
	 * ------------------------------------- 메소드 호출-------------------------------------------------------
	 * - 자바에서 static이 달리면 static 메소드라고 부른다.
	 * - 일반적으로 객체가 생성된 후에 메소드를 호출할 수 있다
	 * 
	 * ------------------------------------- static ----------------------------------------------------------
	 * static : 정적인, dynamic : 동적인
	 * static : 클래스에 속한(클래스 변수 등)
	 * - Math.random()함수를 보면 Math가 대문자임으로 static으로 선언한 메서드 라는 것을 볼 수 있다
	 * - 객체를 생성하지 않고도 속성이나 행위를 쓸 수 있는것을 static 메소드(class 메소드), static 변수라고 한다.
	 * - static은 static끼리만 논다. static 객체를 쓰려면 static으로 선언된 객체 안에서 써야됨
	 * - 정적 블록은 클래스가 메모리로 로딩될 때 자동으로 실행됨(프로그램이 시작될 때), 그 어떤것보다 일찍 시작
	 * - 생성자는 객체 생성 시에 실행된다.
	 * - 필드 선언과 동시에 초기값을 주는 것이 일반적
	 * - 클래스에 속한 멤버를 정적 멤버라고 한다. 그냥 멤버는 객체에 속함
	 * 
	 * 
	 * -------------------------------------- return 문 ---------------------------------------------------------
	 * - 메소드의 실행을 강제 종료하고 호출한 곳으로 돌아간다는 의미
	 * - 메소드 선언에 리턴 타입이 있을 경우에는 return 문 뒤에 리턴값을 추가로 지정해야 한다
	 * 
	 * ------------------------------------- 메소드 오버로딩 -------------------------------------------------
	 * Overloading : 중복정의
	 * 						  한클래스 안에서만 가능하다. 
	 * 						  똑같은 이름의 메소드가 매개변수에 따라서 여러개 가능하게 하는것
	 * 						  return 타입은 아무런 상관이 없다.
	 * Overriding : 재정의(상속 관계가 있을 때)
	 * 
	 * ------------------------------------ 인스턴스 멤버 ----------------------------------------------------
	 * static이 안붙은 것들은 전부 다 인스턴스 변수, 인스턴스 메소드다.
	 * static이 붙은 것들은 클래스 변수, 클래스 메소드(객체 생성 없이도 사용할 수 있는 것들)
	 * 인스턴스 멤버 : 필드와 메소드 등 객체에 소속된 멤버
	 * 
	 * ----------------------------------- 접근 제한자 -----------------------------------------------------
	 * 정보은닉을 구현하기 위해서 사용한다.
	 * 중요한 필드와 메소드가 외부로 노출되지 않도록 해 객체의 무결성을 유지하기 위해서 사용한다.
	 * 접근 제한자     				|				제한 대상 						| 				제한 범위
	 * - public							클래스, 필드, 생성자, 메소드			어디에서나 100% 공개
	 * - protected					필드, 생성자, 메소드						동일패키지 or 부모 자식 관계
	 * - (default)						클래스, 필드, 생성자, 메소드			동일패키지
	 * - private						필드, 생성자, 메소드						객체 안에서만 접근 가능
	 * 
	 * public은 주로 메소드에, private은 주로 속성(필드)에 선언된다.
	 * 
	 * ----------------------------------- getter / setter ------------------------------------------------------
	 * get - 얻는 것, 읽기
	 * set - 주는 것, 쓰기(저장, 기록, 변경)
	 * 은닉된 정보를 읽고, 쓰기 위해서 만들어진 메소드이다.
	 * 값을 변경하는 메소드는 setter, 값을 읽기만 하는 메소드는 getter라고 한다.
	 * 
	 * 
	 * 
	 * 
	 * 자바에서 클래스(Class)와 객체(Object)는 객체 지향 프로그래밍(OOP)의 핵심 개념입니다.

		클래스(Class):
		
		클래스는 객체를 생성하기 위한 설계도나 템플릿입니다.
		객체의 속성(멤버 변수)과 행동(메서드)를 정의합니다.
		클래스는 데이터와 메서드를 포함하며, 이를 통해 객체의 특징과 동작을 정의합니다.
		예를 들어, "사람" 클래스에는 이름, 나이 등의 속성과 걷는, 뛰는 등의 메서드가 포함될 수 있습니다.
		
		객체(Object):
		
		객체는 클래스의 인스턴스(실제 메모리에 할당된 것)입니다.
		클래스의 인스턴스를 생성함으로써 객체를 만듭니다.
		각 객체는 고유한 상태를 가질 수 있으며, 해당 클래스에서 정의된 메서드를 실행할 수 있습니다.
		예를 들어, "사람" 클래스에서 생성된 객체는 각자 다른 이름, 나이를 가지며, 걷는, 뛰는 등의 행동을 할 수 있습니다.
		간단한 예를 통해 설명하면, "자동차" 클래스가 있다고 가정해보겠습니다. 이 클래스에는 속성으로는 모델, 색상, 속도 등이 있을 것입니다. 그리고 이 클래스에는 주행, 정차, 속도 변환 등의 메서드가 정의될 것입니다.
		
		이제 이 클래스를 이용하여 객체를 생성할 수 있습니다. 예를 들어, "소나타" 객체를 생성하면 그 객체는 실제로 존재하는 소나타 자동차가 됩니다. 이 객체는 "자동차" 클래스에 정의된 속성과 메서드를 가질 것입니다.
		
		즉, 클래스는 객체를 만들기 위한 템플릿이며, 객체는 클래스의 인스턴스로서 실제 메모리에 할당된 것입니다. 객체는 클래스에 의해 정의된 속성과 메서드를 가지고 있습니다.
	*/
}
