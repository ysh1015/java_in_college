
public class WhaiIsLamda {
	/*	--------------- 함수형 프로그래밍(functional programming)------------------
	 * 
	 * -- high-order function --
	 * 1. 함수를 변수에 저장 가능
	 * 2. 함수를 매개변수에 전달
	 * 3. 함수를 return 문으로 반환
	 * 
	 * 
	 * --------- 람다식 ---------
	 * 자바에서 람다식은 익명객체와 관계가 있다. 
	 * 혼자서는 존재할 수 없다.
	 * 자바에서는 익명구현 객체를 람다식이라고 한다.
	 * 람다식 : (매개변수, ... ) -> {처리내용};
	 * 람다식은 고계함수(high-order function)
	 * ********중요********* 
	 * 자바에서의 람다식은 함수형 인터페이스를 구현한 객체이다
	 * 함수형 인터페이스로 선언된 추상메서드가 존재할 때만 람다식을 구현할 수 있다
	 * 
	 * 이름이 없기 때문에 변수에 함수를 할당해준다
	 * ex) f = (x,y) -> x + y
	 * 
	 *( ) -> {함수코드}
	 * 이게 일반적이지만 매개변수가 하나일 경우 소괄호 생략가능
	 * 함수코드가 한줄일 경우 중괄호 생랼가능, 하지만 return 문이 있을 경우 한문장이더라도 중괄호 절대 생략 불가!!!
	 * 
	 * 
	 * 
	 * -- 수학 함수를 수학의 람다식으로 바꾸면?--
	 * f(x,y) = x + y          ==           (x,y) -> x + y
	 * 함수의 이름이 사라진다
	 * 
	 * 
	 * 
	 * 
	 * ------- 함수형 인터페이스 ------
	 * 인터페이스가 '단 하나'의 추상 메서드를 가지는 것
	 * 
	 * 
	 * 
	 *    
	 * ------- 메서드 참조 -------
	 * 메서드를 참조해서 매개변수의 정보 및 리턴타입을 알아내 람다식에서 불 필요한 매개변수를 제거하는것을 목적
	 * 재사용이 편함
	 * 람다식은 단순히 두개의 값을 전달하는 역할만 하기 때문에 이런식으로 하면 편하다
	 * 시그니처가 같아야 한다 (void String, int int 등 ***********리턴 타입과 매개변수 타입**********이 같아야 한다)
	 *
	 * 사용 방법
	 * 클래스 :: 메서드
	 * 참조변수 :: 메서드
	 * 
	 * MyFunction m = Math :: max;
	 *	MyFunction m = (a, b) -> Math.max(a, b);
	 * 
	 * 
	 * 
	 * 
	 * 
	 * */
}
